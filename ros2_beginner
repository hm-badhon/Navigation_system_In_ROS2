
########
ros2 run demo_nodes_cpp talker
ros2 run demo_nodes_cpp listener
rqt_graph

########
ros2 run turlesim turtlesim_node
ros2 run turtlesim turtle_teleop_key
rqt_graph

sudo apt install python3-colcon-common-extensions

# gedit bashrc

add
source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash
save it

##########
source ~/.bashrc

apply all the terminal 


######
mkdir ros2_work_space
cd ros2_work_space
mkdir src
colcon build


#####
cd
source ~/ros2_ws/install/setup.bash

add
gedit .bashrc
source ~/ros2_ws/install/setup.bash

# how to create  a package
cd src
ros2 pkg create my_robot_control --build-type ament_python --dependencies rclpy
ros2 pkg create my_robot_control --build-type ament_cmake

## vs code add with ros2
##### sudo snap install code --classic
code .


####
sudo apt install python3-pip
pip3 list


##
pip3 list | grep setuptools
# setuptools                           59.6.0
change it
pip3 install setuptools==58.2.0

# setuptools                           58.2.0

# build the colcon
cd ros2_work_space/
colcon build


#####################
### Create a Ros2 Node with Python and OOP
move to 
cd ros2_work_space/src/my_robot_control/my_robot_control

# create python  file in this folder
touch my_first_py_file.py

# executable this file in terminal
chmod +x my_first_py_file.py

# move 
cd ../..
#vs code
code .


# code for python file


# add ros extension ,c/c++ in vscode

########################
# add this code in python file my_first_py_file.py

#!/usr/bin/env python3

# import rclpy
# from  rclpy.node import Node

# class MyNode(Node):
#     def __init__(self):
#         super().__init__("first_node")
#         self.get_logger().info("Hello from ros2")

# def main(args=None):
#     rclpy.init(args=args)
#     node = MyNode()
#     rclpy.spin(node)
#     rclpy.shutdown()

# if __name__ == '__main__':
#     main()




##########################
# run this code
# Edit it setup.py
entry_points={
        'console_scripts': [
            "test_node = my_robot_control.my_first_py_file:main"
        ],



## then
cd ros2_work_space
# command
colcon build
# then
source ~/.bashrc
----
#run
ros2 run my_robot_control test_node


############
if any change run command
----
colcon build --symlink-install
----
rqt_graph
------
ros2 node list

-
ros2 node info /


####### update it for couter add
# #!/usr/bin/env python3
# import rclpy
# from  rclpy.node import Node

# class MyNode(Node):
#     def __init__(self):
#         super().__init__("first_node")
#         self.counter_ = 0
#         self.create_timer(1.0, self.timer_callback)

#     def timer_callback(self):
#         self.get_logger().info("Hello --" + str(self.counter_))
#         self.counter_ +=1

# def main(args=None):
#     rclpy.init(args=args)
#     node = MyNode()
#     rclpy.spin(node)
#     rclpy.shutdown()

# if __name__ == '__main__':
#     main()

########################

----------- Topic ----------

ros2 topic list


ros2 topic info /chatter
# Type: std_msgs/msg/String
# Publisher count: 1
# Subscription count: 1

ros2 interface show std_msgs/msg/String
# This was originally provided as an example message.
# It is deprecated as of Foxy
# It is recommended to create your own semantically meaningful message.
# However if you would like to continue using this please use the equivalent in example_msgs.

# string data


##Can get data from this topic
# 1st terminal 

ros2 run demo_nodes_cpp talker
# 2nd terminal
ros2 run demo_nodes_cpp listener
# 3rd tterminl
ros2 topic echo /chatter



#
ros2 run turtlesim turtlesim_node
##
ros2 run turtlesim turtle_teleop_key
###
rqt_graph
####
ros2 node list
# /teleop_turtle
# /turtlesim

ros2 topic list
# /parameter_events
# /rosout
# /turtle1/cmd_vel
# /turtle1/color_sensor
# /turtle1/pose

ros2 topic info /turtle1/cmd_vel
# Type: geometry_msgs/msg/Twist
# Publisher count: 1
# Subscription count: 1
ros2 interface show geometry_msgs/msg/Twist
# This expresses velocity in free space broken into its linear and angular parts.

# Vector3  linear
# 	float64 x
# 	float64 y
# 	float64 z
# Vector3  angular
# 	float64 x
# 	float64 y
# 	float64 z


###########Topic 2#####
Wrie a ROS2  publisher with python-
-------------

cd ros2_work_space/src/my_robot_control/my_robot_control
touch draw_circle.py
---------------------------------
# import rclpy
# from  rclpy.node import Node
# from geometry_msgs.msg import Twist


# class DrawCircleNode(Node):

#     def __init__(self):
#         super().__init__("draw_circle")
#         self.cmd_vel_pub_ = self.create_publisher(Twist, "/turtle1/cmd_vel", 10)
#         self.get_logger().info("Draw cicrcle node has been started")

# def main(args)
# ------
# ros2 topic info /turtle1/cmd_vel
--------
# Type: geometry_msgs/msg/Twist
----- Send velocity and angular command to the robot-------

## Add in package.xml
  <depend>geometry_msgs</depend>
  <depend>turtlesim</depend>

--class DrawCircleNode(Node):

    def __init__(self):
        super().__init__("draw_circle_n") # node name can be different
        # ---------------------------------------(massage_type, )
        self.cmd_vel_pub_ = self.create_publisher(Twist, "/turtle1/cmd_vel", 10)
        self.timer_ = self.create_timer(0.5, self.send_velocity_comand)
        self.get_logger().info("Draw cicrcle node has been started")

    def send_velocity_comand(self):
        msg = Twist()
        msg.linear.x = 2.0
        msg.angular.z = 1.0
        self.cmd_vel_pub_.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    node = DrawCircleNode()
    rclpy.spin(node)
    rclpy.shutdown()


---------------
add in setup python
 'console_scripts': [
                "test_node = my_robot_control.my_first_py_file:main",
                "draw_circle_n = my_robot_control.draw_circle:main" # add it
            ],

colcon build --symlink-install
# ----tr 1 publish
ros2 run my_robot_control draw_circle_n
# ----tr 2 subcribe
ros2 run turtlesim turtlesim_node



#######NAvigate the robot###############
ros2 run turtlesim turtlesim_node
ros2 topic list
ros2 topic echo /turtle1/pose



#### Subscribtion

ros2 topic info /turtle1/pose

ros2 interface show tutlesim/msg/pose 

-------pose_subscriber.py---------
import rclpy

from rclpy.node import Node

from turtlesim.msg import Pose

class PoseSubscriberNode(Node):

    def __init__(self):
        super().__init__("pose_subscriber")
        self.pose_subscriber_ =self.create_subscription(Pose, "/turtle1/pose", self.pose_callback,10)
    
    def pose_callback(self, msg:Pose):
        self.get_logger().info(str(msg))

def main(args= None):
    rclpy.init(args=args)
    node = PoseSubscriberNode()
    rclpy.spin(node)
    rclpy.shutdown()


 -------  ----------------
add setup.py 
    'console_scripts': [
                "test_node = my_robot_control.my_first_py_file:main",
                "draw_circle_n = my_robot_control.draw_circle:main",
                "pose_subscriber = my_robot_control.pose_subscriber:main"
            ],




ros2 run my_robot_control pose_subscriber 
ros2 run turtlesim turtlesim_node
rqt_graph


------------------
#!/usr/bin/env python3


import rclpy

from rclpy.node import Node

from turtlesim.msg import Pose

class PoseSubscriberNode(Node):

    def __init__(self):
        super().__init__("pose_subscriber")
        self.pose_subscriber_ =self.create_subscription(Pose, "/turtle1/pose", self.pose_callback,10)
    
    def pose_callback(self, msg:Pose):
        self.get_logger().info("("+str(msg.x)+ "-----" +str(msg.y)+ ")")

def main(args= None):
    rclpy.init(args=args)
    node = PoseSubscriberNode()
    rclpy.spin(node)
    rclpy.shutdown()
----------------------------------------------
colcon build --symlink-install

source ~/.bashrc

----------------------

######Create a Closed Loop System with a Publisher and a Subscriber###############
# make a python file name as turtle_controller

#!/usr/bin/env python3

import rclpy
from rclpy.node import Node

from turtlesim.msg import Pose
from geometry_msgs.msg import Twist


class TurtleControllerNode(Node):

    def __init__(self):
        super().__init__("turtle_controller")
        self.cmd_vel_pub_ = self.create_publisher(Twist, "/turtle1/cmd_vel", 10)
        self.pose_subscriber_ =self.create_subscription(Pose, "/turtle1/pose", self.pose_callback,10)
        self.get_logger().info(" Turtle controller has been started")

    def pose_callback(self, pose: Pose):
        cmd = Twist()
        cmd.linear.x = 5.0
        cmd.angular.z= 0.0
        self.cmd_vel_pub_.publish(cmd)

        
def main(args= None):
    rclpy.init(args=args)
    node = TurtleControllerNode()
    rclpy.spin(node)
    rclpy.shutdown()



    -------------------

    #!/usr/bin/env python3

import rclpy
from rclpy.node import Node

from turtlesim.msg import Pose
from geometry_msgs.msg import Twist


class TurtleControllerNode(Node):

    def __init__(self):
        super().__init__("turtle_controller")
        self.cmd_vel_pub_ = self.create_publisher(Twist, "/turtle1/cmd_vel", 10)
        self.pose_subscriber_ =self.create_subscription(Pose, "/turtle1/pose", self.pose_callback,10)
        self.get_logger().info(" Turtle controller has been started")

    def pose_callback(self, pose: Pose):
        cmd = Twist()
        if pose.x >9.0 or pose.x <2.0 or pose.y >9.0 or pose.y <2.0 :
            cmd.linear.x = 1.0
            cmd.angular.z = 0.9
        else:
            cmd.linear.x = 5.0
            cmd.angular.z= 0.0
        self.cmd_vel_pub_.publish(cmd)

        
def main(args= None):
    rclpy.init(args=args)
    node = TurtleControllerNode()
    rclpy.spin(node)
    rclpy.shutdown()



---------------------------------
ROS2 Serivce
------------------
-------****
ros2 run demo_nodes_cpp add_two_ints_server
---****
ros2 service list
ros2 node list
ros2 service type /add_two_ints
ros2 interface show example_interfaces/srv/AddTwoInts


ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts "{'a':2,'b':5}"
*****


------------------------------------
ros2 run turtlesim turtlesim_node 
ros2 service list

